window.chrome=chrome||window.chrome||window.browser,window.chrome.runtime.getURL(""),(()=>{"use strict";const e="sendTelemetry",o="enableNativeMessaging",s="enableProtection",t="MSG_SETTINGS_SET";let n=window.chrome||window.browser||browser;navigator.userAgent.includes("Edge/")&&(n=window.browser);const i={reload:null},r=e=>new Promise(((o,s)=>{n.runtime.sendMessage({type:"MSG_SETTINGS_GET",payload:e},(function(e){!e||e.error?s(`Error calling settingsGet: ${e?e.error:"No response received"}`):o(e.success)}))})),c=e=>{let o=$(e).parent();e.checked?o.addClass("checked"):o.removeClass("checked"),!0===$(e).prop("disabled")?o.addClass("disabled"):o.removeClass("disabled")},l=async function(l,a,d,g){console.debug("CB: Linking checkbox "+l+" to "+a+" setting"),d&&$(d).addClass("active");let m=document.getElementById(l);await async function(t,n){if(n!==s&&n!==e&&n!==o){console.debug("CB: Linking checkbox "+t.id+" to killswitch");const e=await r(s);$(t).prop("disabled",!1===e)}}(m,a);const u=await r(a);m.checked=a!==o?!1!==u:u,console.debug("CB: Loaded starting value of "+m.checked+" for "+a),c(m),d&&$(d).removeClass("active"),await async function(e,s,r){console.debug("CB: Binding checkbox "+e.id+" to change event"),e.addEventListener("change",(async()=>{let l=$(e).prop("disabled");console.debug("CB: Default state of "+e.id+" is "+(l?"disabled":"active")),$(e).prop("disabled",!0);let a={};var d;a[s]=$(e).prop("checked"),c(e),s===o&&(a[s]?a[s]=await new Promise((e=>{n.permissions.request({permissions:["nativeMessaging"]},(o=>{console.log("MMPPNM: Permissions request resp: ",o),e(o)}))})):a[s]=await new Promise((e=>{n.permissions.remove({permissions:["nativeMessaging"]},(o=>{o?(console.debug("MRNM: Successfully removed permissions"),e(!1)):(console.log("MRNM: Did not remove permissions... ",o),e(!0))}))}))),await(d=a,new Promise(((e,o)=>{n.runtime.sendMessage({type:t,payload:d},(function(s){!s||s.error?o(`Error calling settingsSet: ${s?s.error:"No response received"}`):e(s.success)}))}))),console.debug("CB: Setting has been stored for "+e.id),r&&r(),setTimeout((()=>{console.debug("CB: Restoring "+e.id+" to "+(l?"disabled":"active")),function(e,o){console.debug("CB: Disabled state for "+e.id+" set to "+o),$(e).prop("disabled",o),c(e)}(e,l)}),750),i.reload||(i.reload=n.runtime.connect({name:"RELOAD_ON_CLOSE_PORT"}),console.debug("Began listening for a popup close event"))}))}(m,a,g)};n.i18n.getUILanguage().split("-")[0];let a={noEmailInit:()=>{const e=document.getElementById("email-go");if(!e)return a.success({user_welcomed:!0});e.setAttribute("type","button"),e.addEventListener("click",(()=>a.success({user_welcomed:!0})))},success:e=>{n.storage.sync.set(e,(()=>{console.log("User sync complete - ",e)})),n.runtime.sendMessage({type:t,payload:{enableProtection:!0}},(e=>{!e||e.error?console.log("Error calling settingsSet: ",e?e.error:"No response received"):console.log("Protection layers are enabled")})),console.debug("Redirecting to Dashboard"),window?(console.debug("Redirection to dashboard!"),window.location.href="../app.html"):console.log("Redirection failed - cant access window from this scope!"),n.runtime.sendMessage({type:"MSG_ICONS_REFRESH"})}};document.addEventListener("DOMContentLoaded",(()=>{console.debug("Email screen ready."),$("#telem-opt-in-label").popup({inline:!0,position:"top center"}),((e,o=document)=>{[{id:"welcome-header",msg:"welcomeTitle",sub:""},{id:"tagline",msg:"tagline"},{id:"email-go",msg:"letsGoButton"},{id:"telem-opt-in-label-text",msg:"telemOptInLabel"},{id:"email-pp",msg:"privacyPolicyText"}].forEach((({id:e,msg:s,sub:t=null})=>{const i=o.getElementById(e);i&&(i.textContent=n.i18n.getMessage(s,t))}))})(),document.getElementById("telem-opt-in-label").setAttribute("data-content",n.i18n.getMessage("telemOptInTooltip")),l("telem-consent",e,"#telem-opt-in-label .loader"),n.runtime.sendMessage({type:"MSG_USER_GROUP_GET"},(({success:e,error:o})=>{o?console.error("Error checking user group: ",o):(console.debug("Successfully checked user group: ",e),a.noEmailInit())})),n.windows.getCurrent((e=>{e.height<600&&document.getElementById("malwarebytes-app").classList.add("small-screen")}))}))})();